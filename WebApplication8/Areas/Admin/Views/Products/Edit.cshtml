

@model WebApplication8.Models.WebShop.Product
@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

<h4>Create Product</h4>
@using (@Html.BeginForm("Update", "Products", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data", id = "form-product-update" }))
{
    @await Html.PartialAsync("Partials/_ErrorValidate")

    <div class="form-group">
        @Html.LabelFor(m => m.Id, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
            @Html.TextBoxFor(m => m.Id, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.PriceP, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
           @*@Html.TextBoxFor(m => m.UnitPrice, new { @class = "form-control" })*@ 
            <input asp-for="PriceP" class="form-control" id="PriceP" />
        </div>
    </div>

    

    <div class="form-group">
        @Html.LabelFor(m => m.Image, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
            @*<input id="ImageUrl" name="ImageUrl" />*@
            @Html.TextBoxFor(m => m.Image)
            <input name="uplImage" style="display:inline" type="file" id="btnSelectImg" value="Choose Picture ..." />
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ProductDate, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
            @*@Html.TextBoxFor(m => m.ProductDate, new { @class = "form-control" })*@
            <div class="input-group input-append date" id="dateRangePicker">
                @Html.TextBoxFor(m => m.ProductDate, new { @class = "form-control" })
                <span class="input-group-addon add-on"><span class="glyphicon glyphicon-calendar"></span></span>
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.CategoryId, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
           @* @Html.DropDownList("CategoryId")*@
            <select asp-for="CategoryId"
                    asp-items="ViewBag.CategoryId"></select>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.SupplierId, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
           @* @Html.DropDownList("SupplierId")*@
            <select asp-for="SupplierId"
                    asp-items="ViewBag.SupplierId"></select>
            <input id="SupplierId-Text" />
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Quantity, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
            @Html.TextBoxFor(m => m.Quantity, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Discount, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
            @Html.TextBoxFor(m => m.Discount, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        <label class="col-md-2 control-label">Features</label>
        <div class="col-md-8">

            <label class="checkbox-inline">@Html.CheckBoxFor(m => m.Available) @Html.DisplayNameFor(m => m.Available)</label>
            <label class="checkbox-inline">@Html.CheckBoxFor(m => m.Special) @Html.DisplayNameFor(m => m.Special)</label>
            <label class="checkbox-inline">@Html.CheckBoxFor(m => m.Latest) @Html.DisplayNameFor(m => m.Latest)</label>


        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Views, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
            @Html.TextBoxFor(m => m.Views, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Description, new { @class = "col-md-2 control-label" })
        <div class="col-md-8">
            @Html.TextAreaFor(m => m.Description, new { @class = "form-control ", rows = "3", cols = "55", id = "Description" })
        </div>
    </div>
    <button type="submit" onclick="form.action='@Url.RouteUrl(new {controller="/",area="" })Admin/Products/Update'" class="btn btn-primary box-button col-md-offset-2">
        Update
        <i class="fa fa-check icon-white"></i>
    </button>

}



@section scripts{
<script src="~/Scripts/maskedInput/jquery.maskedinput.js"></script>
  <script src="~/js/setup_js_product_admin.js"></script>
    <script type="text/javascript">
    $(function () {
        // $('#datetimepicker1').datetimepicker();
        CKEDITOR.replace('Description');

    });
    </script>
    <script type="text/javascript">
        $(function () {
            var id = $("#SupplierId").val();
            $("#SupplierId-Text").val(id);
            $('#PriceP').mask("000,000,000,000,000,000", { reverse: true });
            $('#ProductDate').mask('99/99/9999');
            $("#SupplierId").change(function () {
                var id = $(this).val();
                $("#SupplierId-Text").val(id);
            });
        });
    </script>


    <script type="text/javascript">
    /*$(document).ready(function () {
        $("#btnSelectImg").click(function () {
            var finder = new CKFinder();
            finder.selectActionFunction = function (fileUrl) {
                $('#Image').val(fileUrl);
            };
            finder.popup();
        });
    });*/
    </script>

    <script type="text/javascript">
    $(document).ready(function () {

        $('#dateRangePicker')
            .datepicker({
                format: 'dd/mm/yyyy',
                
            });

        $('#form-product-update').bootstrapValidator({
            //live: 'disabled',
            message: 'This value is not valid',
            feedbackIcons: {
                valid: 'glyphicon glyphicon-ok',
                invalid: 'glyphicon glyphicon-remove',
                validating: 'glyphicon glyphicon-refresh'
            },
            fields: {
                Name: {

                    validators: {
                        notEmpty: {
                            message: 'The Name is required and cannot be empty'
                        },


                    }
                },

                UnitPrice: {

                    validators: {
                        notEmpty: {
                            message: 'The Unit Price is required and cannot be empty'
                        },


                    }
                },

                Image: {

                    validators: {
                        notEmpty: {
                            message: 'The Image is required and cannot be empty'
                        },


                    }
                },


                ProductDate: {

                    validators: {
                        notEmpty: {
                            message: 'The Product Date is required and cannot be empty'
                        },
                        date: {
                            format: 'DD/MM/YYYY',
                            message: 'in valid date time. format The dd/mm/yyyy'
                        },


                    }
                },

                Quantity: {

                    validators: {
                        notEmpty: {
                            message: 'The Quantity is required and cannot be empty'
                        },


                    }
                },

                Discount: {

                    validators: {
                        notEmpty: {
                            message: 'The Discount is required and cannot be empty'
                        },


                    }
                },

                View: {

                    validators: {
                        notEmpty: {
                            message: 'The View is required and cannot be empty'
                        },


                    }
                },


            }
        });

        // Validate the form manually
        //$('#validateBtn').click(function() {
        //    $('#RegisterForm').bootstrapValidator('validate');
        //});

        //$('#resetBtn').click(function() {
        //    $('#defaultForm').data('bootstrapValidator').resetForm(true);
        //});
    });



    </script>





}